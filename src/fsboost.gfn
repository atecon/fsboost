<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="fsboost" minver="2020e" lives-in-subdir="true">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.3</version>
<date>2022-06-15</date>
<description>Forward-stagewise boosted regression estimates</description>
<tags>C13 C52</tags>
<label>Forward Stagewise</label>
<menu-attachment>MAINWIN/Model/LinearModels</menu-attachment>
<help>
pdfdoc:fsboost.pdf
</help>
<depends count="2">
string_utils regls </depends>
<gretl-function name="fsreg" type="bundle">
 <params count="3">
  <param name="y" type="series" const="true">
<description>Dep. variable</description>
  </param>
  <param name="X" type="list" const="true">
<description>Candidates</description>
  </param>
  <param name="opts" type="bundle" optional="true"/>
 </params>
<code>/* Main function for forward-stagewise boosted regression. */
if $datatype != 2       # cross-sectional or panel
  smpl --no-missing y X
else                    # time-series case
  smpl --contiguous y X
endif
bundle self = default_fsreg_opts()
if exists(opts)
  self = opts + self         # override defaults
endif
# Initilizations
string self.yname = argname(y)
strings self.Xnames = varnames(X)
initialize(&amp;self, y, X)
add_early_stopping_threshold(&amp;self)
stdize_y_and_x(&amp;self)
fsreg_estimator(&amp;self)
post_process(&amp;self)
# Handle intercept: non-scaled as &quot;coeff&quot; is already re-scaled
matrix resids = {y - lincomb(self.X_wo_constant, self.coeff)}
if self.with_constant
  scalar self.resid_mean = meanc(resids)
  self.coeff = self.resid_mean | self.coeff
endif
matrix self.coeff_nonzero = get_nonzero_rescaled_coeffs(self)
attach_coefficient_row_labels(&amp;self)
scalar self.ncoeff = rows(vec(self.coeff_nonzero))
add_yhat_and_uhat_to_bundle(y, X, &amp;self)
post_estimation_statistics(&amp;self)
list self.X_final = add_selected_predictors_to_list(X, self)
cleanup_bundle(&amp;self)
return self
</code>
</gretl-function>
<gretl-function name="print_fsboost_results" type="void">
 <params count="1">
  <param name="self" type="bundle"/>
 </params>
<code>/* Print results. */
printf &quot;\n-------------------------------------------------------\n&quot;
printf &quot;Forward-stagewise regression results (no inference)\n&quot;
printf &quot;Early stopping strategy: '%s' (c = %g)&quot;, self.early_stopping_strategy, self.early_stopping_threshold
printf &quot;\n-------------------------------------------------------&quot;
strings label_str = array(0)
if self.with_constant
  label_str += defarray(&quot;const&quot;)
endif
label_str += get_names_of_nonzero_coeffs(self)
label_str += defarray( &quot;Learning rate&quot;, &quot;Number of iterations&quot;, &quot;Correl. w. residuals&quot;, &quot;S.E. of regression&quot; )
matrix extra = self.learning_rate | self.actual_num_iterations |self.rho_values[self.actual_num_iterations] | sd(self.uhat)
if ok(self.r2)
  matrix extra |= self.r2
  label_str += defarray(&quot;R-squared&quot;)
endif
if ok(self.r2_qcorr)
  matrix extra |= self.r2_qcorr
  label_str += defarray(&quot;R-squared alt.&quot;)
endif
if ok(self.mse)
  matrix extra |= self.mse
  label_str += defarray(&quot;MSE&quot;)
endif
if inbundle(self, &quot;uhat_first_order_corr&quot;)
  matrix extra |= self.uhat_first_order_corr
  label_str += defarray(&quot;rho&quot;)
endif
matrix bhat = self.coeff_nonzero ~ NA
modprint bhat label_str extra
</code>
</gretl-function>
<gretl-function name="plot_rho_values" type="void">
 <params count="3">
  <param name="self" type="bundle"/>
  <param name="filename" type="string" optional="true">
<description>Path + filename to store figure</description>
  </param>
  <param name="absolute_values" type="bool" default="1"/>
 </params>
<code>/* Plot correlation coefficients. */
string title = &quot;Forward stagewise correlation values&quot;
string ylabel = (absolute_values == FALSE) ? &quot;Correlations w. residuals&quot; : &quot;Absolute correlations w. residuals&quot;
scalar fontsize = 12
string filename = (exists(filename)) ? filename : &quot;display&quot;
matrix mplot = (absolute_values == TRUE) ? abs(self.rho_values) : self.rho_values
set force_decpoint on
plot mplot
  options with-lines time-series
  literal set linetype 1 lc rgb &quot;black&quot; lw 1
  literal set nokey
  literal set grid
  printf &quot;set title \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, title, fontsize
  printf &quot;set xlabel 'Iterations' font \&quot;, %d\&quot;&quot;, fontsize
  printf &quot;set ylabel '%s' font \&quot;, %d\&quot;&quot;, ylabel, fontsize
end plot --output=&quot;@filename&quot;
set force_decpoint off
</code>
</gretl-function>
<gretl-function name="plot_coefficient_paths" type="void">
 <params count="3">
  <param name="self" type="bundle"/>
  <param name="filename" type="string" optional="true">
<description>Path + filename to store figure</description>
  </param>
  <param name="ylog_scale" type="bool" default="0"/>
 </params>
<code>/* Plot coefficient paths. */
string title = &quot;Forward stagewise coefficient paths&quot;
string ylabel = (ylog_scale == FALSE) ? &quot;Standardized coefficients&quot; : &quot;Standardized coefficients (in logarithms)&quot;
scalar fontsize = 12
string filename = (exists(filename)) ? filename : &quot;display&quot;
string ylog_scale_str = (ylog_scale == TRUE) ? &quot;--ylogscale=10&quot; : &quot;&quot;
strings names_X_final = strdrop(varnames(self.X_final), &quot;const&quot;)
matrix mplot = get_columns_by_name(self.betas, names_X_final)
string linestyles = &quot;&quot;
loop i=1..cols(mplot)
  linestyles += sprintf(&quot;set style line %d ps 0.02\n&quot;, $i)
endloop
set force_decpoint on
plot mplot
  options with-lp time-series single-yaxis @ylog_scale_str
  printf &quot;@linestyles&quot;
  literal set key right outside
  literal set grid
  printf &quot;set title \&quot;%s\&quot; font \&quot;, %d\&quot;&quot;, title, fontsize
  printf &quot;set xlabel 'Iterations' font \&quot;, %d\&quot;&quot;, fontsize
  printf &quot;set ylabel '%s' font \&quot;, %d\&quot;&quot;, ylabel, fontsize
  printf &quot;set yrange[%g:%g]&quot;, min(mplot)*1.1, max(mplot)*1.1
end plot --output=&quot;@filename&quot;
set force_decpoint off
</code>
</gretl-function>
<gretl-function name="fsreg_gui" type="bundle" pkg-role="gui-main">
 <params count="8">
  <param name="y" type="series" const="true">
<description>Dep. variable</description>
  </param>
  <param name="X" type="list" const="true">
<description>Candidates</description>
  </param>
  <param name="learning_rate" type="scalar" min="0.0001" max="0.9999" default="0.025" const="true">
<description>Learning rate</description>
  </param>
  <param name="max_num_iterations" type="int" min="100" default="10000">
<description>Max. number of iterations</description>
  </param>
  <param name="early_stopping_rounds" type="int" min="20" default="50">
<description>Early stopping rounds</description>
  </param>
  <param name="plot_coefficient_paths" type="bool" default="0">
<description>Plot coefficient paths</description>
  </param>
  <param name="plot_rho_values" type="bool" default="0">
<description>Plot correlation w. residuals</description>
  </param>
  <param name="verbose" type="int" min="0" max="2" default="1">
<description>Print details</description>
<labels count="3">
"quiet" "details" "more details" </labels>
  </param>
 </params>
<code>/* GUI wrapper for fsreg(). */
bundle model = null
scalar model.verbose = verbose
scalar model.learning_rate = learning_rate
scalar model.max_num_iterations = max_num_iterations
scalar model.early_stopping_rounds = early_stopping_rounds
bundle model = fsreg(y, X, model)
print_fsboost_results(model)
if plot_rho_values == TRUE
  plot_rho_values(model)
endif
if plot_coefficient_paths == TRUE
  plot_coefficient_paths(model)
endif
return model
</code>
</gretl-function>
<gretl-function name="fsboost_predict" type="matrix">
 <params count="2">
  <param name="L" type="list" const="true">
<description>List of regressors</description>
  </param>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Compute predictions using point estimates. List &quot;L&quot; must comprise the same regressors in the same order as originally passed to fsreg(). */
matrix pred = {NA}
list X = null
matrix bhat = vec(self.coeff)
if self.with_constant == TRUE &amp;&amp; inlist(L, &quot;const&quot;) == FALSE
  X += const
endif
X += L
if nelem(X) != rows(bhat)
  printf &quot;\nError: Length of list L does not match originally passed list.\n&quot;
  return pred
endif
return lincomb(X, bhat)
</code>
</gretl-function>
<gretl-function name="default_fsreg_opts" type="bundle" private="1">
<code>/* Set default values */
bundle self = null
scalar self.verbose = 1
string self.early_stopping_strategy = &quot;residual_corr_abs&quot;
add_early_stopping_threshold(&amp;self)
scalar self.learning_rate = 0.01
scalar self.max_num_iterations = 10000
scalar self.early_stopping_rounds = 50
return self
</code>
</gretl-function>
<gretl-function name="add_early_stopping_threshold" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Add threshold for early stopping depending on early stopping type. */
if self.early_stopping_strategy == &quot;residual_corr_abs&quot;
  # Abs. correlation has to improve at minimum by x units.
  scalar self.early_stopping_threshold = 0.01
elif self.early_stopping_strategy == &quot;residual_corr_rel&quot;
  # Abs. correlation has to improve at minimum relatively by x.
  scalar self.early_stopping_threshold = 0.05
endif
</code>
</gretl-function>
<gretl-function name="stdize_y_and_x" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Demeaning series y and list X and compute associated std.-errors. */
matrix self.my = cdemean({self.y}, TRUE)
scalar self.ysd = sdc({self.y})
matrix self.mX = cdemean({self.X_wo_constant}, TRUE)
matrix self.Xsd = sdc({self.X_wo_constant})
</code>
</gretl-function>
<gretl-function name="initialize" type="void" private="1">
 <params count="3">
  <param name="self" type="bundleref"/>
  <param name="y" type="series" const="true"/>
  <param name="X" type="list" const="true"/>
 </params>
<code>/* Some initalizations. */
scalar self.T = $nobs
series self.y = y
list self.X_wo_constant = X - const
scalar self.with_constant = nelem(self.X_wo_constant) &lt; nelem(X) ? TRUE : FALSE
if self.with_constant == TRUE
  strings self.Xnames_wo_constant = strdrop(self.Xnames, &quot;const&quot;)
else
  strings self.Xnames_wo_constant = self.Xnames
endif
# Initializations of variables for estimator function
scalar self.resid_mean = 0
matrix self.rho_values = mshape(NA, self.max_num_iterations, 1)
matrix self.betas = zeros(self.max_num_iterations, nelem(self.X_wo_constant))
scalar self.actual_num_iterations = NA
</code>
</gretl-function>
<gretl-function name="post_estimation_statistics" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Add post-estimation statistics to return bundle. */
add_sd_of_uhat(&amp;self)
add_first_order_residual_corr(&amp;self)
get_insample_stats(&amp;self)
</code>
</gretl-function>
<gretl-function name="add_sd_of_uhat" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Standard deviation of residuals */
scalar self.uhat_variance = sd(self.uhat)
</code>
</gretl-function>
<gretl-function name="add_first_order_residual_corr" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* First order serial correlation coefficient. */
if $datatype == 2
  matrix muhat = {self.uhat}
  muhat ~= mlag(muhat, 1)
  scalar self.uhat_first_order_corr = mcorr(muhat)[1,2]
endif
</code>
</gretl-function>
<gretl-function name="add_selected_predictors_to_list" type="list" private="1">
 <params count="2">
  <param name="X" type="list" const="true"/>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Add active set of predictors to list. */
list L = (self.with_constant == TRUE) ? const : null
S = get_names_of_nonzero_coeffs(self)
loop foreach i S
  list L += genseries(&quot;$i&quot;, X.$i)
endloop
return L
</code>
</gretl-function>
<gretl-function name="add_yhat_and_uhat_to_bundle" type="void" private="1">
 <params count="3">
  <param name="y" type="series" const="true"/>
  <param name="X" type="list" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/* Add final fitted values and residuals to bundle. */
series self.yhat = lincomb(X, self.coeff)
series self.uhat = y - self.yhat
</code>
</gretl-function>
<gretl-function name="get_insample_stats" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Collect insample statistics of fit. */
# from regls pkg.
matrix stats = regls_get_stats(self.y, self.yhat)
pos_mse = instrings(cnameget(stats), &quot;MSE&quot;)
pos_r2 = instrings(cnameget(stats), &quot;R^2&quot;)
self.r2 = stats[pos_r2]
self.mse = stats[pos_mse]
# from ridge pkg
matrix r_squares = r2_stats(self.my, {self.yhat}, self.ncoeff)
scalar self.r2_qcorr = r_squares[1]
</code>
</gretl-function>
<gretl-function name="cleanup_bundle" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Drop unnecessary stuff from bundle */
delete self.Xsd
delete self.ysd
delete self.mX
delete self.y
delete self.my
#delete self.ncoeff
delete self.X_wo_constant
delete self.resid_mean
</code>
</gretl-function>
<gretl-function name="attach_coefficient_row_labels" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Attach row labels to vector of point estimates. */
strings S = array(0)
S = (self.with_constant == TRUE) ? defarray(&quot;const&quot;) : S
strings S += get_names_of_nonzero_coeffs(self)
rnameset(self.coeff_nonzero, S)
rnameset(self.coeff, self.Xnames)
</code>
</gretl-function>
<gretl-function name="post_process" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper for some post-processing. */
get_valid_rho_values(&amp;self)
cumsum_coefficient_paths(&amp;self)
matrix self.coeff = get_rescaled_coeffs(self)
</code>
</gretl-function>
<gretl-function name="cumsum_coefficient_paths" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Cumulate iterative coefficient estimates, restrict vector length and attach column labels for each regressor (needed for optional plotting. */
self.betas = cum(self.betas[1:self.actual_num_iterations,])
cnameset(self.betas, self.Xnames_wo_constant)
</code>
</gretl-function>
<gretl-function name="get_valid_rho_values" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Restrict vector to length equal to the number of actual iterations. */
self.rho_values = self.rho_values[1:self.actual_num_iterations]
</code>
</gretl-function>
<gretl-function name="get_rescaled_coeffs" type="matrix" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve all final point estimates and rescale. */
return self.betas[self.actual_num_iterations,]' .* (self.ysd ./ self.Xsd')
</code>
</gretl-function>
<gretl-function name="get_nonzero_rescaled_coeffs" type="matrix" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve final non-zero point estimates. */
matrix bhat_all = self.coeff
matrix mask = (self.coeff .!= 0)
return selifr(self.coeff, mask)
</code>
</gretl-function>
<gretl-function name="get_max_correlation" type="scalar" private="1">
 <params count="2">
  <param name="yX" type="matrix" const="true"/>
  <param name="position" type="scalarref">
<description>j-th regressor</description>
  </param>
 </params>
<code>/* Compute correlations between &quot;y&quot; and all exogenous variables (&quot;X&quot;).
Return maximum of absolute correlations. */
scalar k = cols(yX) - 1
matrix correlations = mshape(NA, k, 1)
loop i=1..k
  correlations[i] = mcorr(yX[,1] ~ yX[,1+i])[1,2]
endloop
scalar position = imaxc(abs(correlations))
return correlations[position]
</code>
</gretl-function>
<gretl-function name="print_early_stopping_reached" type="void" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Print info message on early stopping*/
if self.verbose &gt; 0
  printf &quot;\nInfo: No improvement in score '%s' for\n                 the last %d iterations.\nEarly stopping applies.\n&quot;, self.early_stopping_strategy, self.early_stopping_rounds
endif
</code>
</gretl-function>
<gretl-function name="print_iteration_details" type="void" private="1">
 <params count="3">
  <param name="self" type="bundle" const="true"/>
  <param name="iteration" type="int"/>
  <param name="rho" type="scalar" const="true">
<description>Correlation coeff.</description>
  </param>
 </params>
<code>/* */
if self.verbose == 2
  printf &quot;\nInfo: Iteration %d out of %d: correlation coeff. = %g.\n&quot;, iteration, self.max_num_iterations, rho
endif
</code>
</gretl-function>
<gretl-function name="early_stopping_applies" type="scalar" private="1">
 <params count="3">
  <param name="self" type="bundle" const="true"/>
  <param name="score_former" type="scalar" const="true"/>
  <param name="score_current" type="scalar" const="true"/>
 </params>
<code>/* Decision whether the early stopping criteria is met, or not.
return: If the criteria is met, return TRUE, otherwise FALSE. */
if self.early_stopping_strategy == &quot;residual_corr_abs&quot;
  scalar delta = abs(score_former) - abs(score_current)
elif self.early_stopping_strategy == &quot;residual_corr_rel&quot;
  scalar delta = ( abs(score_former) - abs(score_current) ) / abs(score_former)
endif
if delta &lt; 0    # correlation increased
  return TRUE
else
  return (delta &gt;= self.early_stopping_threshold) ? FALSE : TRUE
endif
</code>
</gretl-function>
<gretl-function name="fsreg_estimator" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Actual implementation of the boosting-like forward stagewise algorithm. */
matrix yX = self.my ~ self.mX
scalar n_rounds_no_improvement = 0
scalar rho_value_former = NA
scalar self.actual_num_iterations = 0
loop i=1..self.max_num_iterations
  scalar position = NA
  self.actual_num_iterations++
  scalar col = (i &gt; 1) ? (i-1) : 1
  self.rho_values[i] = get_max_correlation(yX, &amp;position)
  print_iteration_details(self, $i, self.rho_values[i])
  delta = self.learning_rate * sgn(self.rho_values[i])
  # update beta and residuals
  self.betas[i, position] = self.betas[i, position] + delta
  yX[,1] = yX[,1] - delta * self.mX[, position]
  if i &gt; 1    # early stopping
    check = early_stopping_applies(self, self.rho_values[i-1], self.rho_values[i])
    if check == TRUE
      n_rounds_no_improvement++
    else
      n_rounds_no_improvement = 0  # reset
    endif
  endif
  if n_rounds_no_improvement == self.early_stopping_rounds
    print_early_stopping_reached(self)
    break
  endif
endloop
</code>
</gretl-function>
<gretl-function name="get_columns_by_name" type="matrix" private="1">
 <params count="2">
  <param name="m" type="matrix" const="true"/>
  <param name="select" type="strings" const="true"/>
 </params>
<code>/* Retrieve columns of 'm' as identified by 'select'. If 'm' has no column labels or 'select' is empty, return empty matrix.
return: matrix*/
matrix ret
strings labels_matrix = cnameget(m)
if !nelem(labels_matrix) || !nelem(select)
  print &quot;WARNING: No columns selected.&quot;
  return ret
endif
loop foreach i select
  scalar pos = instrings(labels_matrix, &quot;$i&quot;)
  if pos
    ret ~= m[,pos]
  endif
endloop
if cols(ret)
  cnameset(ret, select)
endif
return ret
</code>
</gretl-function>
<gretl-function name="get_names_of_nonzero_coeffs" type="strings" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve names variables for which point estimates are non-zero for optimal number of iterations. */
matrix bhat_all = vec(self.betas[self.actual_num_iterations,])
scalar n_nonzero_vars = sum(bhat_all .!= 0)
strings selected_vars = array(n_nonzero_vars)
scalar counter = 1
loop i = 1..rows(bhat_all)
  if bhat_all[i] != 0
    selected_vars[counter] = self.Xnames_wo_constant[i]
    counter++
  endif
endloop
return selected_vars
</code>
</gretl-function>
<gretl-function name="r2_stats" type="matrix" private="1">
 <params count="3">
  <param name="y_true" type="matrix">
<description>T by 1 vector of realizations</description>
  </param>
  <param name="y_pred" type="matrix">
<description>T by 1 vector of estimated values</description>
  </param>
  <param name="num_parameters" type="scalar">
<description>No. of parameters</description>
  </param>
 </params>
<code>/* Helper function for computing different R-square statistics. */
matrix y_true = vec(y_true)
matrix y_pred = vec(y_pred)
if rows(y_true) != rows(y_pred)
  printf &quot;\nError: Vectors y_true and y_pred are of different length.\n&quot;
  return NA
endif
if rows(y_pred) &lt; 2
  printf &quot;\nError: R^2 score not well-defined with less than two samples.\n&quot;
  return NA
endif
if isconst(y_true)
  printf &quot;\nError: Vector y_true is constant.\n&quot;
  return NA
endif
matrix R = NA * zeros(3,1)
R[1] = r2_qcorr(&amp;y_true, &amp;y_pred)
R[2] = r2_qcorr_adjusted(R[1], rows(y_true), num_parameters)
R[3] = r2_score(y_true, y_pred)
rnameset(R, &quot;r2_qcorr r2_qcorr_adj r2_score&quot;)
return R
</code>
</gretl-function>
<gretl-function name="r2_qcorr" type="scalar" private="1">
 <params count="2">
  <param name="y_true" type="matrixref" const="true"/>
  <param name="y_pred" type="matrixref" const="true"/>
 </params>
<code>/* R-square based on quadratic correlation. */
return corr(y_true, y_pred)^2
</code>
</gretl-function>
<gretl-function name="r2_qcorr_adjusted" type="scalar" private="1">
 <params count="3">
  <param name="r2" type="scalar">
<description>R-square from r2_qcorr()</description>
  </param>
  <param name="n" type="int">
<description>Sample length</description>
  </param>
  <param name="num_parameters" type="scalar">
<description>No. of ridge parameters used</description>
  </param>
 </params>
<code>/* Adjusted R-square based on quadratic correlation */
nominator = n - 1
denominator = n - num_parameters - 1
return 1 - (1-r2) * nominator/denominator
</code>
</gretl-function>
<gretl-function name="r2_score" type="scalar" private="1">
 <params count="2">
  <param name="y_true" type="matrix" const="true"/>
  <param name="y_pred" type="matrix" const="true">
<description>Must incl. an intercept if present</description>
  </param>
 </params>
<code>/* R^2 (coefficient of determination) regression score function.
Best possible score is 1.0 and it can be negative (because the
model can be arbitrarily worse). A constant model that always
predicts the expected value of y, disregarding the input features, would get a R^2 score of 0.0.
Notes
-----
This is not a symmetric function.
Unlike most other scores, R^2 score may be negative (it need not
actually be the square of a quantity R).
This metric is not well-defined for single samples and will return
a NaN value if n_samples is less than two.
References
----------
&lt;https://github.com/scikit-learn/scikit-learn/blob/
1495f69242646d239d89a5713982946b8ffcf9d9/
sklearn/metrics/regression.py#L449&gt;
`Wikipedia entry on the Coefficient of determination
&lt;https://en.wikipedia.org/wiki/Coefficient_of_determination&gt;`
*/
# Initialize check values
nonzero_denominator = 0
nonzero_numerator = 0
valid_score = 0
# Compute statistics
scalar numerator = sumc( (y_true-y_pred).^2)
scalar denominator = sumc( (y_true-mean(y_true)).^2 )
nonzero_denominator = (denominator != 0) ? 1 : nonzero_denominator
nonzero_numerator = (numerator!=0) ? 1 : nonzero_numerator
valid_score = (nonzero_denominator &amp;&amp; nonzero_numerator) ? 1 : valid_score
output_scores = 1
return (valid_score) ? (1 - numerator/denominator) : output_scores
</code>
</gretl-function>
<sample-script>
set verbose off
clear
include fsboost.gfn

scalar runEX = 1		# select an example

# Select an example
if runEX == 1
    open australia.gdt -q -p    # time-series data set

    # define the variables
    series LHS = ldiff(PAU)
    list RHS = const LHS(-1 to -2) IUS(-1 to -2)  IAU(-1 to -2)

    # Optional: set learning rate a bit higher
    bundle opts = defbundle(&quot;learning_rate&quot;, 0.025)

elif runEX == 2
    # SIMULATION
    nulldata 750
    set seed 1234
    setobs 1 1 --time-series
    scalar k = 35
    series e = normal()
    series LHS = 1
    series LHS = 4.5 + 0.8*LHS(-1) - 0.4*LHS(-2) + e
    matrix X = mnormal($nobs, k)		# further exogenous
    list RHS = const LHS(-1 to -6)		# arbitrary lags of the endogenous
    loop i=1..cols(X) -q
        RHS += genseries(sprintf(&quot;S%d&quot;, $i), X[,i])
    endloop

    bundle opts = null

elif runEX == 3
    open mroz87.gdt -q -p     # cross-sectional data set

    series LHS = WW
    list RHS = const dataset
    RHS -= LHS WW     # drop lhs variable

    # Set a low learning rate
    bundle opts = defbundle(&quot;learning_rate&quot;, 0.025)

elif runEX == 4             # example taken from Allin's regls pckg.

    # An artificial example with more regressors than observations,
    # where the actually relevant regressors are known. With an s
    # value (lambda/lambda-max) of around 0.3, ADMM is pretty good
    # at picking out the relevant ones. Note that no seed is set, so
    # results will differ somewhat from run to run.

    n = 80  # observations
    k = 120 # regressors
    matrix X = mnormal(n,k)
    u = mnormal(n, 1)
    matrix sel = {5, 20, 37, 60, 70}
    matrix y = sumr(X[,sel]) + u
    printf &quot;Truly non-zero coefficients:\n&quot;
    eval sel

    nulldata n --preserve
    series LHS = y
    list RHS = null
    loop i=1..k -q
      RHS += genseries(sprintf(&quot;x%d&quot;, i), X[,i])
    endloop

    # Set a low learning rate and low early stopping threshold
    bundle opts = defbundle(&quot;early_stopping_strategy&quot;, &quot;residual_corr_rel&quot;)
endif

# Run standard OLS as benchmark
if nelem(RHS) &lt; $nobs
    ols LHS RHS
endif


# Run estimation
bundle B = fsreg(LHS, RHS, opts)
#print B
print_fsboost_results(B)      # Print estimation results

list X_final = B.X_final    # Retrieve list of selected regressors
eval varnames(X_final)

# Retrieve point estimates
eval B.coeff            # retrieve point estimates of all variables
eval B.coeff_nonzero    # retrieve point estimates of selected variables

series yhat = B.yhat    # Retrieve fitted values

# Plot realizations vs. fitted values
#gnuplot LHS yhat --output=&quot;display&quot;

# Plot correlations as a function of iterations
plot_rho_values(B)

# Plot coefficient paths
plot_coefficient_paths(B)

# Prediction
smpl 1 10
matrix preds = fsboost_predict(RHS, B)
print preds



/* Activate if wished
# Define own parameter set
bundle opts = null
scalar opts.verbose = 1
scalar opts.learning_rate = 0.001                  # learning rate
scalar opts.max_num_iterations = 5000   # max. number of boosting rounds
scalar opts.early_stopping_rounds = 20  # stop if no improvement after n rounds

# Run estimation
bundle B = fsreg(LHS, RHS, opts)
print_fsboost_results(B)      # Print estimation results
*/
</sample-script>
</gretl-function-package>
</gretl-functions>
